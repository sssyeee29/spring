package org.zerock.controller;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.zerock.dto.BoardVO;
import org.zerock.service.BoardService;

import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j;
import oracle.jdbc.proxy.annotation.Post;

/*
/board/boardList -> 전체데이터반환
/board/view -> 상세페이지  
 */


@Controller 
//@RestController
@RequestMapping("/board")
@RequiredArgsConstructor
@Log4j
public class BoardController {

	private final BoardService boardService;
	
	//localhost:8080/board/boardList -> 전체 리스트 목록
	@GetMapping({"/", "/boardList"})
	public String boardList(Model model) {
		
		List<BoardVO> list = boardService.selectListBoards(); //데이터 가져오기
		
		model.addAttribute("boardList", list); //데이터를 boardList에 담기, 근데 값이 1개가 아니라 여러개니까 순서대로
		
		return "boardList"; //jsp화면으로 전달 (view)
	}
	
	//localhost:8080/board/register(get) -> 게시글 등록 화면 출력 
	@GetMapping("/register") //get방식이고
	public String register() {
		return "boardRegister"; //jsp화면 호출 
	}
	
	//유효성체크 boardRegister.jsp에서 action하면 이 부분으로 오는것 
	//localhost:8080/board/register(post) -> 등록화면에서 입력한 데이터를 기반으로 DB등록
	@PostMapping("/register") //이게 post방식
	public String insertBoard(BoardVO vo) {
		//입력값을 가져와서 db에 저장하는거 (boardRegister.jsp에서 등록을 누르면 등록되면서 리스트 화면이 보여짐)
		boardService.insertBoard(vo); //boardService에 있는 insertBoard로 갔다가, BoardRepository insertBoard에도 갔다가 목록화면이 보여짐  	
		return "redirect:/board/boardList"; //post에 redirect 요청을 한 것
	}
	
	//목록 누르면 연결되는 화면 (상세페이지로 가기)
	//localhost:8080/board/view -> num(기본키) 해당하는 상세페이지
	@GetMapping("/view")
	public String viewBoard(@RequestParam("num") int num, Model model) { //jsp에서는 requestgetparameter였는데 여기서는 requestparam 
					//DB에서 num(기본키)의 전체 데이터 가져와서 vo저장(DB에 존재하는 num이여야함(기본키))
		BoardVO vo = boardService.selectOneByNum(num);
		//vo에 저장된 num(??)의 데이터를 board변수에 담아서 boardView.jsp전달 
		model.addAttribute("board",vo);
		return "boardView";
	}
	
	//게시글삭제 누르면 비밀번호 확인창 나오는거 
	//localhost:8080/board/check(get) -> 삭제, 수정 시 비밀번호가 맞는지 
	@GetMapping("/check")
	//model에 값을 담으면 jsp에서 ${num} 같은 방식으로 꺼낼 수 있음 (컨트롤러에서 데이터를 뷰로 전달하는 역할)
	public String checkGet(@RequestParam int num, Model model) { 
		model.addAttribute("num", num);		
		return "checkBoard";
	}
	
	//localhost:8080/board/check(post) -> 삭제 수정 시 DB 조회해서 비밀번호 체크
	@PostMapping("/check")
	public String checkPost(@RequestParam int num, @RequestParam String pass, Model model) {
		//서비스 호출해서 true(비밀번호 맞음), false(비밀번호 틀림)반환받음
		boolean check = boardService.checkPassword(num, pass);
		
		if(check) {
			//비밀번호 맞음
			model.addAttribute("num",num);
			return "checkSuccess";
		}else {
			//비밀번호 틀림
			model.addAttribute("message", "비밀번호가 틀렸습니다.");
			 //두번 연속으로 틀리면 에러가 나서 num를 다시 전달해줘야함 (똑같은 게시글에 대해 다시 시도할 수 있게)
			model.addAttribute("num", num);
			return "checkBoard"; 
		}
		
	}
	
	// 데이터 삭제 
	//localhost:8080/board/delete -> num에 해당하는 데이터(DB) 삭제
	@GetMapping("/delete")
	public String deleteGet(@RequestParam int num) {
		boardService.deleteBoard(num);
		return "redirect:/board/boardList";
	}
	
	// 데이터 변경
	//localhost:8080/board/update(get) -> 수정화면 출력
	@GetMapping("/update")
	public String updateGet(@RequestParam int num, Model model) {
		BoardVO vo = boardService.selectOneByNum(num);
		model.addAttribute("board",vo);
		return "boardUpdate";
		
	}
	
	// 데이터 변경
	//localhost:8080/board/update(post) -> 수정화면에서 입력한 내용을 DB에 반영 후 목록화면으로 이동
	@PostMapping("/update")
	public String updatePost(BoardVO vo) {
		boardService.updateBoard(vo);
		return "redirect:/board/view?num="+ vo.getNum(); //상세페이지로 보낼때 num이 필요해서  
	}
	
	
	
}
